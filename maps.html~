<!-- New version by April Shen april@cs.uw.edu -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Metro Maps for Photos</title>
    <script type="text/javascript" src="d3.v2.js"></script>
    <style>
      .axis path,
      .axis line {
          fill: none;
          stroke: black;
          shape-rendering: crispEdges;
      }
      .axis text {
          font-family: sans-serif;
          font-size: 11px;
      }
    </style>
  </head>
  <body>
    <script>
      var metro;
      var ss;
      function initData(callback) {
      d3.xml("realRegionTest.graphml", function(doc) {
        var nodetable = d3.map();
        var nodes = [];
        var links = [];
        var format = d3.time.format("%d/%m/%Y");
        d3.select(doc).selectAll("node").each(function () {
          var e = d3.select(this);
          var id = e.attr("id");
          var sx = parseInt(e.select("data[key='x']").text()), sy = parseInt(e.select("data[key='y']").text());
          var node = {
            id: id,
            date: format.parse(e.select("data[key='date']").text().trim()),
            fixed: 0,
            edges: d3.map(), // indexed by line
      };
                                nodetable.set(id, node);
      nodes.push(node);
    });
    // parse out the various metro lines; we'll instantiate node later
    var lines = [];
    var linetable = d3.map();
    d3.select(doc).selectAll("key")
      .filter(function() {return d3.select(this).attr("for") == "edge"})
      .each(function() {
        var id = d3.select(this).attr("id");
        var line = { id: id, nodes: [] };
        linetable.set(id, line);
        lines.push(line);
      });
    // parse out the edges
    d3.select(doc).selectAll("edge").each(function () {
      var e = d3.select(this);
      var n1 = nodetable.get(e.attr("source"));
      var n2 = nodetable.get(e.attr("target"));
      var l = {
        id: e.attr("id"),
        source: n1,
        target: n2,
        path: [],
      };
      e.selectAll("data").each(function() {
        // XXX assuming that none of these are FALSE
        var p = d3.select(this).attr("key");
        l.path.push(linetable.get(p));
        if (!n1.edges.has(p)) n1.edges.set(p, []);
        if (!n2.edges.has(p)) n2.edges.set(p, []);
        n1.edges.get(p).push(l);
        n2.edges.get(p).push(l);
      });
      /*
      if (l.path.length > 1) {
          // end nodes need some special handling
          n1.
      }
      */
      links.push(l);
    });
    // determine the initial stories
    var initials = d3.map();
    nodes.forEach(function(n) {
      n.edges.forEach(function(k,v) {
        var l = linetable.get(k);
        if (v.length == 1 && !l.nodes.length) {
          l.nodes.push(n);
        }
      });
    });
    // follow the trail (topological sort)
    lines.forEach(function(l) {
      var curNode = l.nodes[0];
      var edges = curNode.edges.get(l.id);
      var curEdge;
      var first = true;
      do {
        curEdge = first ? edges[0] : edges[0] == curEdge ? edges[1] : edges[0];
        first = false;
        curNode = curEdge.source == curNode ? curEdge.target : curEdge.source;
        l.nodes.push(curNode);
        edges = curNode.edges.get(l.id);
      } while (edges.length != 1);
    });
    metro
      .lines(lines)
      .nodes(nodes)
      .links(links);
    metro();
  });
}

var debug = window.location.hash == "#debug";

metro = metromap(d3.select("#svg-container"), debug)
  .size([1000, 600]);

function clear() {
  localStorage.setItem("state", null);
  initData(); //this runs in debug case when we have no stored state ~ats
}

ss = slideshow(metro); // slideshow includes the clicking stuff... ~ats
ss(d3.select("#slideshow-controls"), d3.select("#time-controls"), d3.select("#line-controls"), d3.select("#slideshow-text"));

if (debug) {
clear()
  debugForce(metro, d3.select("#debug-container"));
} else { // if not in debug mode, use this json ~ats
  d3.select("#debug-container").style("display", "none");
  d3.json("realRegionTest.json", function(doc) { //~ats
    metro.state(doc);
    metro();
    metro.mode(MetroMode.VIEW);
  });
}
    </script>
  </body>
</html>
